#!/global/apps/python/2.7.3/bin/python
##!/home/ntnu/mitya/virt_env/virt1/bin/python -B
import numpy as np
from numpy import *
from netCDF4 import *
import sys, re, glob
from os import system
import numpy.ma as ma
import datetime
from datetime import date, time
import argparse
parser = argparse.ArgumentParser(description='grep record 0.1')
parser.add_argument('-i', help='input file', dest='input', action="store")
parser.add_argument('-o', help='output file', dest='output', action="store", default="sample.nc")
parser.add_argument('-dt', help='input date to grep: 2005-08-23 01:00:00', dest='grep', action="store", nargs=2)
parser.add_argument('--time', help='time var', dest='time_var', action="store", default="ocean_time")
parser.add_argument('--f', help='time format', dest='time_f', action="store", default="s")
args = parser.parse_args()

def print_list(data):
    col_width = max(len(i) for i in data) + 2  # padding
    count = 0
    a= []
    for i in data:
        count = count +1
        if count < 6:
            a.append(i)
        else:
            print "".join(j.ljust(col_width) for j in a)
            a = []
            count = 0


def hisdate(his):
    ref_time = time(0,0,0)
    ref=date(1970,01,01)
    refer= datetime.datetime.combine(ref, ref_time)
    if (args.time_f =='s') and (float(his) > 86400):
        outdate = (refer + datetime.timedelta(float(his)/(3600*24))).strftime("%Y-%m-%d %H:%M:%S")
    else:
        outdate = (refer + datetime.timedelta(float(his))).strftime("%Y-%m-%d %H:%M:%S")
    return outdate

def hisdate_date(his):
    ref_time = time(0,0,0)
    ref=date(1970,01,01)
    refer= datetime.datetime.combine(ref, ref_time)
    if (args.time_f =='s') and (float(his) > 86400):
        outdate = (refer + datetime.timedelta(float(his)/(3600*24))).strftime("%Y-%m-%d")
    else:
        outdate = (refer + datetime.timedelta(float(his))).strftime("%Y-%m-%d")
    return outdate

def unpack(ina):
    outa = np.zeros(ina.shape)
    outa[:] = ina[:]
    #outa = np.asarray(ina)
    return outa

grep_date = datetime.datetime.strptime(args.grep[0],'%Y-%m-%d').date()
grep_time = datetime.datetime.strptime(args.grep[1],'%H:%M:%S').time()
#print 'you want to grep', grep_date, grep_time
grep_date_time = datetime.datetime.combine(grep_date, grep_time)
print 'you want to grep', grep_date_time

f = Dataset(args.input)
times = (args.time_var, "time", "clim_time", "bry_time")
result = False
for t in times:
    try:
        records=unpack(f.variables[t])
        result = True
        break
    except KeyError:
             #e = sys.exc_info()[0]
        continue

if result == False:
    print "there is no time var with names", times
    print_list(f.variables.keys())         
    f.close()
    exit()
else:
    print "name of time var: ", t
    pass
f.close()
numrec=0
fnd = False

for rec in records:
    if datetime.datetime.strptime(hisdate_date(rec),'%Y-%m-%d').date()== grep_date:
        if datetime.datetime.strptime(hisdate(rec),'%Y-%m-%d %H:%M:%S')==grep_date_time:
            numrec = numrec + 1
            fnd = True
            break
        else:
            print "maybe this record is ok? the date is the same:", (numrec+1), datetime.datetime.strptime(hisdate(rec),'%Y-%m-%d %H:%M:%S')
            print "________________________"
    else:
        pass
    numrec = numrec + 1
if fnd == True:
    print 'the exact time record for the date_time ', grep_date_time, ' exists'
    print 'the record number is ', numrec
#    print 'do not forget that counting goes from 0, thus required time slice is [num-1]'
else:
    print 'no exact entry'



